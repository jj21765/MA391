#CH 8, PROBLEM 17

data = data.frame(a,b1)
a1 = matrix(1,nrow=23); print(a1)
a = c(1.22,3.48,5.10,3.39,4.13,1.75,2.95,1.3,.76,2.52,1.66,1.84,3.19,4.11,3.09,4.96,1.64,3.23,3.07,4.26,4.4,2.42,2.96)
a2 = matrix(a,nrow=23)
A = matrix(c(a1,a2),ncol=2); print(A)            
b1 = c(2.62,8.35,6.44,3.51,6.52,2.46,5.02,1.73,1.14,4.56,2.9,3.19,4.26,7,5.49,7.64,3.09,3.88,5.49,6.82,5.53,4.3,3.55)
b = matrix(b1,nrow=23); print(b)
xhat = solve(t(A)%*%A, t(A)%*%b);print(xhat)


plot(a,b1)
abline(lm(b1~a))
#Find R squared
model=lm(b1~a)
summary(model)

#CH 9, PROBLEM 1
coinFlip = function(p,startMoney=10,maxMoney=20){
  ## Initialization
  state = startMoney
  flipNumber = 0
  record = data.frame(flip=0,money=state)
  ## Run the game ##
  while (state!=0 & state!=maxMoney){
    U = runif(1)
    if (U<p){state=state+1}else{state=state-1}
    flipNumber = flipNumber+1
    record = rbind(record,data.frame(flip=flipNumber,money=state))
  }
  ## Record data ##
  if (flipNumber>=25){
    oneGame = data.frame(win=0,money25=record$money[26],numFlips=flipNumber)
  }
  else{
    oneGame = data.frame(win=0,money25=state,numFlips=flipNumber)
  }
  if (state==maxMoney){oneGame$win=1}
  return(oneGame)
}

coinFlip(0.5)
N = 3000;p=0.5;startMoney=10;maxMoney = 20
#Initialize data frame without data
results =
  data.frame(win=as.numeric(),money25=as.numeric(),numFlips=as.numeric())
for (i in 1:N){
  oneGame = coinFlip(p,startMoney,maxMoney)
  results =
    rbind(results,data.frame(win=oneGame$win,money25=oneGame$money25,numFlips=oneGame$numFlips))
}

#b) how long does game from part b last 
mean(results$win)
sd(results$win)
#c) how much money on average after 25 flips
mean(results$numFlips)
sd(results$numFlips)
mean(results$money25)

#CH9, PROBLEM 2
diceRoll = function(p,iterations){
  state = 0
  rollNumber = 0
  record  = data.frame(roll = 0, consecutive = state)
  while (rollNumber< iterations){
    rollNumber = rollNumber+1
    U = runif(1)
    if(U<p){state = state+1}else{state=0}
    record = rbind(record,data.frame(roll=rollNumber,consecutive=state))
  }
  firstseven = data.frame(minrolls = as.numeric())
  for (i in 1:length(record$consecutive)){
    if (record$consecutive[i] == 1){
      firstseven = rbind(firstseven,record$roll[i])
    }
  }
  if(max(record$consecutive)>=5){
    oneGame = data.frame(consecutiveflips = 1)
  }
  else{oneGame = data.frame(consecutiveflips = 0)}
  fs = min(firstseven)
  oneGame = cbind(oneGame,fs)
}



diceRoll((1/6),100)
oneGame$consecutiveflips
oneGame$fs
N = 3000;
results = data.frame(consec = as.numeric(),firstseven = as.numeric())
for (i in 1:N){
  oneGame = diceRoll((1/6),100)
  results =
    rbind(results,data.frame(consec = oneGame$consecutiveflips,firstseven=oneGame$fs))
}
print(results)
mean(results$consec)
mean(results$firstseven)
  
#ch9, PROBLEM 3

#a) find mean number of customers in a week, simulated 10000 times to find the mean number of customers
#that come 
a = rpois(10000,1)
ans = mean(a); print(ans)

#b) count number of arrivals
results=data.frame(zero=as.numeric(),one=as.numeric(),two=as.numeric(),three = as.numeric(), fourplus=as.numeric())
zero = 0;one=0;two=0;three=0;fourplus=0
for (i in 1:length(a)){
  if(a[i]==0){
    zero = zero +1
  }
  if(a[i]==1){
    one = one +1
  }
  if(a[i]==2){
    two = two + 1
  }
  if(a[i]==3){
    three = three +1
  }
  if(a[i]>=4){
    fourplus=fourplus + 1
  }
}
print(zero)
print(one)
print(two)
print(three)
print(fourplus)
#compared with the poisson values from section 8.1, the values are pretty similar, and if off only off by at most 0.01
